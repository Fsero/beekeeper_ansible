# tasks file for rsyslog

- name: 'install iptables tools'
  apt: name=iptables-persistent state=present cache_valid_time=3600
  tags: 'common::firewall'
  

- name: 'install iptables converter'
  apt: name=iptables-converter state=present cache_valid_time=3600
  tags: 'common::firewall'
  
  
# show all the hosts in the inventory
- name: update rules for ipv6
  template:
    src: common.iptablesv6.rules.j2
    dest: "/etc/iptables/rulesv6"
    validate: "ip6tables-converter -s %s "
    owner: root
    group: root
    mode: 0440
  tags: 'common::firewall'

- name: create rules for ipv6
  shell: ip6tables-converter -s /etc/iptables/rulesv6 > /etc/iptables/rules.v6
  become: true
  tags: 'common::firewall'

- name: apply rules for ipv6
  shell: ip6tables-restore < /etc/iptables/rules.v6
  become: true
  tags: 'common::firewall'

- name: removing old rules
  file:
    path: etc/iptables/rules
    state: absent
  tags: 'common::firewall'


- name: update rules for pki
  template:
    src: mon.iptables.rules.j2
    dest: "/etc/iptables/rules"
    validate: "iptables-converter -s %s "
    owner: root
    group: root
    mode: 0440
  when:  "'pki' in group_names"
  tags: 'common::firewall'
  

- name: update rules for sinkers
  template:
    src: sinkers.iptables.rules.j2
    dest: "/etc/iptables/rules"
    validate: "iptables-converter -s %s "
    owner: root
    group: root
    mode: 0440
  when:  "'sinkers' in group_names"
  tags: 'common::firewall'
  
- name: update rules for collectors
  template:
    src: collector.iptables.rules.j2
    dest: "/etc/iptables/rules"
    validate: "iptables-converter -s %s "
    owner: root
    group: root
    mode: 0440
  when:  "'collector' in group_names"
  tags: 'common::firewall'
  
- name: create rules
  shell: iptables-converter -s /etc/iptables/rules > /etc/iptables/rules.v4
  become: true
  tags: 'common::firewall'
  
- name: reload iptables
  shell: iptables-restore < /etc/iptables/rules.v4
  become: true
  tags: 'common::firewall'

# handles docker, if was running we need to restart it so reapplies its own rules.
- name: is docker already running?
  shell: service docker status warn=false
  register: _svc_docker
  failed_when: _svc_docker.rc != 0 and ("unrecognized service" not in _svc_docker.stderr)
  ignore_errors: true
  tags: 'common::firewall'

- name: restart docker if running
  service: name=docker state=restarted
  when: "_svc_docker.rc == 0"
  tags: 'common::firewall'